import { PatternName } from '../../types';
import {
  PatternConfigs,  
  PatternOutput,
  Reliable,
} from '../types';

const outputTemplate = {
  invertedHammer_bottom:
    'B√∫a ng∆∞·ª£c |a-b|/|c-d| > 1/10. C·∫£nh b√°o gi√° ƒë·∫£o chi·ªÅu ho·∫∑c tƒÉng l√™n khi ·ªü cu·ªëi chu k√¨ gi·∫£m gi√°. Cu·ªëi chu k√≠ gi·∫£m (RSI, MA...). N·∫øu c√¢y n·∫øn b√∫a ng∆∞·ª£c h√¨nh th√†nh c√≥ n·∫øn xanh marubuzu v∆∞·ª£t qua m·ª©c c·∫£n th√¨ s·∫Ω x√°c nh·∫≠n th√™m tƒÉng gi√°',
  gravestoneDoji_bottom:
    'Doji bia m·ªô (|a-b|/|c-d| < 1/10. C·∫£nh b√°o gi√° ƒë·∫£o chi·ªÅu ho·∫∑c tƒÉng l√™n khi ·ªü cu·ªëi chu k√¨ gi·∫£m gi√°. Cu·ªëi chu k√≠ gi·∫£m (RSI, MA...). N·∫øu c√¢y n·∫øn Doji bia m·ªô h√¨nh th√†nh c√≥ n·∫øn xanh marubuzu v∆∞·ª£t qua m·ª©c c·∫£n th√¨ s·∫Ω x√°c nh·∫≠n th√™m tƒÉng gi√°',
  shootingStar_top:
    'Sao ƒë·ªïi ng√¥i |a-b|/|c-d| > 1/10. M·∫´u n·∫øn b√∫a ng∆∞·ª£c C·∫£nh b√°o gi√° ƒë·∫£o chi·ªÅu ho·∫∑c gi·∫£m khi ·ªü cu·ªëi chu k√¨ tƒÉng gi√°  v√† th·∫•p h∆°n gi√° m·ªü c·ª≠a. Cu·ªëi chu k√¨ tƒÉng (RSI, MA). M√†u ƒë·ªè s·∫Ω x√°c nh·∫≠n xu h∆∞·ªõng m·∫°nh h∆°n m√†u xanh',
  gravestoneDoji_top:
    'Doji bia m·ªô (|a-b|/|c-d| < 1/10. Xu·∫•t hi·ªán ·ªü ƒë·ªânh, b√°o hi·ªáu chu k√¨ tƒÉng gi√° s·∫Øp k·∫øt th√∫c. C·∫£nh b√°o gi√° ƒë·∫£o chi·ªÅu ho·∫∑c gi·∫£m khi ·ªü cu·ªëi chu k√¨ tƒÉng gi√°  v√† th·∫•p h∆°n gi√° m·ªü c·ª≠a. Cu·ªëi chu k√¨ tƒÉng (RSI, MA). M√†u ƒë·ªè s·∫Ω x√°c nh·∫≠n xu h∆∞·ªõng m·∫°nh h∆°n m√†u xanh',
};

const configs: PatternConfigs = [
  {
    start_index: 'n3',
    single_pattern: {
      name: PatternName.InvertedHammer,
      potential_position: {
        type: ['bottom', Reliable.Weak],
        reliability({ b2, f4, f3 }) {
          return (Number(b2) + Number(f4) + Number(f3)) / 3;
        },
        description: 'N·∫øu b√∫a ng∆∞·ª£c |a-b|/|c-d| > 1/10',
      },
    },
    combo_patterns: [
      {
        indexes: ['n3', 13],
        name: '[n3,13]',
        potential_direction: {
          type: ['up', Reliable.Null],
          reliability({ f6, f8 }) {
            return Number(f6 || f8);
          },
        },
      },
      {
        indexes: ['n3', 14],
        name: '[n3,14]',
        potential_direction: {
          type: ['up', Reliable.Null],
          reliability({ f6, f8 }) {
            return Number(f6 || f8);
          },
        },
      },
      {
        indexes: ['n3', 15],
        name: '[n3,15]',
        potential_direction: {
          type: ['up', Reliable.Strong],
          reliability({ f6 }) {
            return Number(f6);
          },
        },
      },
    ],
  },
  {
    start_index: 'n3',
    single_pattern: {
      name: PatternName.GravestoneDoji,
      potential_position: {
        type: ['bottom', Reliable.Weak],
        reliability({ f1, b2, f4, f3 }) {
          if (f1) {
            return (Number(b2) + Number(f4) + Number(f3)) / 3;
          }

          return 0;
        },
        description: 'Doji bia m·ªô (|a-b|/|c-d| < 1/10',
      },
    },
    combo_patterns: [
      {
        indexes: ['n3', 13],
        name: '[n3,13]',
        potential_direction: {
          type: ['up', Reliable.Null],
          reliability({ f6, f8 }) {
            return Number(f6 || f8);
          },
        },
      },
      {
        indexes: ['n3', 14],
        name: '[n3,14]',
        potential_direction: {
          type: ['up', Reliable.Null],
          reliability({ f6, f8 }) {
            return Number(f6 || f8);
          },
        },
      },
      {
        indexes: ['n3', 15],
        name: '[n3,15]',
        potential_direction: {
          type: ['up', Reliable.Strong],
          reliability({ f6 }) {
            return Number(f6);
          },
        },
      },
    ],
  },
  {
    start_index: 'n3',
    single_pattern: {
      name: PatternName.ShootingStar,
      potential_position: {
        type: ['top', Reliable.Strong],
        reliability({ t2, f5, f3 }) {
          return (Number(t2) + Number(f5) + Number(f3)) / 3;
        },
        description: 'N·∫øu sao ƒë·ªïi ng√¥i |a-b|/|c-d| > 1/10',
      },
    },
    combo_patterns: [
      {
        indexes: ['n3', -13],
        name: '[n3,-13]',
        potential_direction: {
          type: ['down', Reliable.Null],
          reliability({ f9, f7 }) {
            return Number(f9 || f7);
          },
        },
      },
      {
        indexes: ['n3', -14],
        name: '[n3,-14]',
        potential_direction: {
          type: ['down', Reliable.Null],
          reliability({ f9, f7 }) {
            return Number(f9 || f7);
          },
        },
      },
      {
        indexes: ['n3', -15],
        name: '[n3,-15]',
        potential_direction: {
          type: ['down', Reliable.Strong],
          reliability({ f7 }) {
            return Number(f7);
          },
        },
      },
    ],
  },
  {
    start_index: 'n3',
    single_pattern: {
      name: PatternName.GravestoneDoji,
      potential_position: {
        type: ['top', Reliable.Strong],
        reliability({ f1, t2, f5, f3 }) {
          if (f1) {
            return (Number(t2) + Number(f5) + Number(f3)) / 3;
          }

          return 0;
        },
        description: 'Doji bia m·ªô (|a-b|/|c-d| < 1/10',
      },
    },
    combo_patterns: [
      {
        indexes: ['n3', -13],
        name: '[n3,-13]',
        potential_direction: {
          type: ['down', Reliable.Null],
          reliability({ f9, f7 }) {
            return Number(f9 || f7);
          },
        },
      },
      {
        indexes: ['n3', -14],
        name: '[n3,-14]',
        potential_direction: {
          type: ['down', Reliable.Null],
          reliability({ f9, f7 }) {
            return Number(f9 || f7);
          },
        },
      },
      {
        indexes: ['n3', -15],
        name: '[n3,-15]',
        potential_direction: {
          type: ['down', Reliable.Strong],
          reliability({ f7 }) {
            return Number(f7);
          },
        },
      },
    ],
  },
];

const minPercentage = 0.5;

export const positiveN3 = (indexes, input) => {
  // console.log('üöÄ ~ file: positiveN3.ts:11 ~ positiveN3 ~ input', input);

  // const result: PatternOutput = {
  //   name: '',
  //   description: '',
  //   potential_direction: ['none', Reliable.Null],
  //   potential_position: ['none', Reliable.Null],
  // };
  const result = []
  configs.forEach(({ start_index, single_pattern, combo_patterns }) => {

    // confirm position
    const confirmedPosition = single_pattern.potential_position.reliability(input) > minPercentage;
    if (confirmedPosition) {
      result.push({
        start_index,
        name: single_pattern.name,
        potential_position: single_pattern.potential_position.type
      })


      combo_patterns.forEach(combo_pattern => {
        if (combo_pattern.potential_direction.reliability(input) > minPercentage) {
          result.push({
            start_index,
            name: combo_pattern.name,
            potential_direction: combo_pattern.potential_direction.type
          })
        }
      })
    }
  });
  
  return result;
};
